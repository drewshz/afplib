«IMPORT afplib»
«EXTENSION template::GeneratorExtensions»

«DEFINE main FOR Model»

«FILE "org/afplib/io/StructuredFieldFactory.java"»

package org.afplib.io;

import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.List;
import java.util.Stack;

import org.afplib.CodepageHelper;
import org.afplib.Data;
import org.afplib.base.BaseFactory;
import org.afplib.base.SF;
import org.afplib.base.UNKNSF;
import org.afplib.base.Triplet;
import org.afplib.afplib.*;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;

class StructuredFieldFactory extends AbstractStructuredFieldFactory {

	Charset charset = CodepageHelper.CHARSET_IBM500;
	Stack<Charset> charsets = new Stack<Charset>();
	FNC fnc;

	SF sf(byte[] buffer, int pos, int stop) {
		int id = Data.toUnsigned(buffer, pos+3, pos+5);
		SF sf;
		switch(id) {
		«FOREACH structuredFields AS sf»
		case «sf.id»: {
			«sf.name» obj = AfplibFactory.eINSTANCE.create«sf.name»();
			«IF isBegin(sf.id)»
			charsets.push(charset);
			charset = CodepageHelper.CHARSET_IBM500;
			«ENDIF»
			«IF isEnd(sf.id)»
			if(!charsets.isEmpty())
				charset = charsets.pop();
			else
				charset = CodepageHelper.CHARSET_IBM500;
			«ENDIF»
			«IF sf.name == "FNC"»
				this.fnc = (FNC) obj;
			«ELSEIF sf.name == "EFN"»
				this.fnc = null;
			«ENDIF»
			«FOREACH sf.elements AS e»«IF e.metaType == Group»«EXPAND setter FOR e»«ENDIF»«ENDFOREACH»
			«FOREACH sf.elements AS e»«IF e.metaType != Group»«EXPAND setter FOR e»«ENDIF»«ENDFOREACH»
			sf = obj;
			break;
		}«ENDFOREACH»
		default:
				sf = BaseFactory.eINSTANCE.createUNKNSF();
				byte[] data = new byte[stop - pos + 1 + 2];
				System.arraycopy(buffer, pos, data, 0, stop - pos + 1 + 2);
				((UNKNSF)sf).setRawData(data);
				break;
		}
		sf.setId(id);
		return sf;
	}

	void triplet(List<Triplet> triplets, byte[] buffer, int start, int bufstop) {
		int pos = start;
		while(pos + 1 <= bufstop) {
			int length = buffer[pos] & 0xff;
			if(length == 0) break;
			int id = buffer[pos + 1] & 0xff;
			int stop = pos + length - 1;
			if(stop > bufstop) break;

			switch(id) {
			«FOREACH groupMembers AS t»
			«IF t.type.toString() == "Triplet"»
			case «t.id»: {
				«t.name» obj = AfplibFactory.eINSTANCE.create«t.name»();
				«FOREACH t.elements AS e»«IF e.metaType == Group»«EXPAND setter FOR e»«ENDIF»«ENDFOREACH»
				«FOREACH t.elements AS e»«IF e.metaType != Group»«EXPAND setter FOR e»«ENDIF»«ENDFOREACH»
				triplets.add(obj);
				«IF t.name == "CGCSGID"»
				charset = CodepageHelper.getCharset(obj.getCPGID(), obj.getGCSGID());
				«ENDIF»
				«IF t.name == "FullyQualifiedName"»
				if(obj.getFQNType() == FullyQualifiedNameFQNType.CONST_DATA_OBJECT_INTERNAL_RESOURCE_REFERENCE_VALUE) {

					if(stop >= pos + 4) {
						Integer lid = Data.toUnsigned(buffer, pos + 4, pos + 4);
						obj.setFQName(lid.toString());
					}

				}
				«ENDIF»
				break;
			}
			«ENDIF»
			«ENDFOREACH»
			}
			pos+=length;
		}
	}

	void sdf(List<Triplet> triplets, byte[] buffer, int start, int bufstop) {
		int pos = start;
		int lengthSize, lengthOffset, idSize, lengthAddition;

		while(pos + 1 <= bufstop) {

			if(0xfe == Integer.valueOf(Data.toHex(buffer, pos, 1), 16)) {
				lengthSize = 2;
				lengthOffset = 2;
				idSize = 2;
				lengthAddition = 4;
			} else {
				lengthSize = 1;
				lengthOffset = 1;
				idSize = 1;
				lengthAddition = 2;
			}

			int id = Integer.valueOf(Data.toHex(buffer, pos, idSize), 16);

			int length = Data.toUnsigned(buffer, pos + lengthOffset, pos + lengthOffset - 1 + lengthSize);
			length += lengthAddition;

			int stop = pos + length - 1;
			if(stop > bufstop) break;

			switch(id) {
			«FOREACH groupMembers AS t»
			«IF t.type.toString() == "SDF"»
			case «t.id»: {
				«t.name» obj = AfplibFactory.eINSTANCE.create«t.name»();
				«FOREACH t.elements AS e»«IF e.metaType == Group»«EXPAND setter FOR e»«ENDIF»«ENDFOREACH»
				«FOREACH t.elements AS e»«IF e.metaType != Group»«EXPAND setter FOR e»«ENDIF»«ENDFOREACH»
				triplets.add(obj);
				break;
			}
			«ENDIF»
			«ENDFOREACH»
			}
			pos+=length;
		}
	}

	void cmd(List<Triplet> triplets, byte[] buffer, int start, int bufstop) {
		int pos = start;

		while(pos + 1 <= bufstop) {

			int id = Data.toUnsigned(buffer, pos, pos);
			int length = 0;

			if(0x0 == id) {
				length = 1;
			} else if((id & 0x88) == 0x08) {
				length = 2;
			} else if(id == 0xfe) {
			  // unsupported
			} else {
				length = Data.toUnsigned(buffer, pos + 1, pos + 1) + 2;
			}

			int stop = pos + length - 1;
			if(stop > bufstop) break;

			switch(id) {
			«FOREACH groupMembers AS t»
			«IF t.type.toString() == "GOCACmd"»
			case «t.id»: {
				«t.name» obj = AfplibFactory.eINSTANCE.create«t.name»();
				«FOREACH t.elements AS e»«IF e.metaType == Group»«EXPAND setter FOR e»«ENDIF»«ENDFOREACH»
				«FOREACH t.elements AS e»«IF e.metaType != Group»«EXPAND setter FOR e»«ENDIF»«ENDFOREACH»
				triplets.add(obj);
				break;
			}
			«ENDIF»
			«ENDFOREACH»
			}
			pos+=length;
		}
	}

	Triplet cs(byte[] buffer, int pos, int stop, int id) {
		switch(id) {
		«FOREACH groupMembers AS t»
		«IF t.type.toString() == "CS"»
		case «t.id»: {
			«t.name» obj = AfplibFactory.eINSTANCE.create«t.name»();
			«FOREACH t.elements AS e»«IF e.metaType == Group»«EXPAND setter FOR e»«ENDIF»«ENDFOREACH»
			«FOREACH t.elements AS e»«IF e.metaType != Group»«EXPAND setter FOR e»«ENDIF»«ENDFOREACH»
			return obj;
		}
		«ENDIF»
		«ENDFOREACH»
		}
		return null;
	}

	«FOREACH structuredFields AS sf»«EXPAND fixedGroup FOR sf»«ENDFOREACH»
	«FOREACH groupMembers AS t»«EXPAND fixedGroup FOR t»«ENDFOREACH»

	«FOREACH groupMembers AS t»
	«IF t.type.toString() == "Fixed"»
	«t.name» _«t.name»(byte[] buffer, int pos, int stop) {
		«t.name» obj = AfplibFactory.eINSTANCE.create«t.name»();
		«FOREACH t.elements AS e»«IF e.metaType == Group»«EXPAND setter FOR e»«ENDIF»«ENDFOREACH»
		«FOREACH t.elements AS e»«IF e.metaType != Group»«EXPAND setter FOR e»«ENDIF»«ENDFOREACH»
		return obj;
	}

	int _«t.name»(«t.name» obj, byte[] buffer, int start) {
		int length = 0;
		«FOREACH t.elements AS e»«EXPAND groupSaver FOR e»«ENDFOREACH»
		«FOREACH t.elements AS e»«IF t.lengthAttribute == e.name»obj.«e.setter()»(length);«ENDIF»«ENDFOREACH»
		«FOREACH t.elements AS e»«EXPAND propertySaver FOR e»«ENDFOREACH»
		return length;
	}
	«ENDIF»
	«ENDFOREACH»

	int binary_triplets(byte[] buffer, int bstart, List<Triplet> triplets) {
		int start = bstart;

		for(Triplet m : triplets) {
			int length = 0;
			switch(m.eClass().getClassifierID()) {
			«FOREACH groupMembers AS t»
			«IF t.type.toString() == "Triplet"»
			case AfplibPackage.«camelCase2Constant(t.name)»: {
				m.setTripletId(«t.id»);
				«t.name» obj = («t.name») m;
				«FOREACH t.elements AS e»«EXPAND groupSaver FOR e»«ENDFOREACH»
				«FOREACH t.elements AS e»«EXPAND propertySaver FOR e»«ENDFOREACH»

				if(length == 0) length = 2;
				buffer[start] = Data.toUnsignedByte(length)[0];
				buffer[start + 1] = Data.toUnsignedByte(«t.id»)[0];
				«IF t.name == "CGCSGID"»
				charset = CodepageHelper.getCharset(obj.getCPGID(), obj.getGCSGID());
				«ENDIF»
				break;
			}
			«ENDIF»«ENDFOREACH»
			default: throw new IllegalArgumentException("unknown triplet: "+m);
			}
			start += length;
		}

		return start - bstart;
	}

	int binary_sdf(byte[] buffer, int bstart, List<Triplet> triplets) {
		int start = bstart;

		for(Triplet m : triplets) {
			int length = 0;
			switch(m.eClass().getClassifierID()) {
			«FOREACH groupMembers AS t»
			«IF t.type.toString() == "SDF"»
			case AfplibPackage.«camelCase2Constant(t.name)»: {
				m.setTripletId(«t.id»);
				«t.name» obj = («t.name») m;
				«FOREACH t.elements AS e»«EXPAND groupSaver FOR e»«ENDFOREACH»
				«FOREACH t.elements AS e»«EXPAND propertySaver FOR e»«ENDFOREACH»

				if((«t.id» & 0xff00) == 0xfe00) {
					if(length == 0) length = 4;
					byte[] bId = Data.toUnsignedShort(«t.id»);
					byte[] bLength = Data.toUnsignedShort(length - 4);
					buffer[start] = bId[0];
					buffer[start + 1] = bId[1];
					buffer[start + 2] = bLength[0];
					buffer[start + 3] = bLength[1];
				} else {
					if(length == 0) length = 2;
					buffer[start] = Data.toUnsignedByte(«t.id»)[0];
					buffer[start + 1] = Data.toUnsignedByte(length - 2)[0];
				}
				break;
			}
			«ENDIF»«ENDFOREACH»
			default: throw new IllegalArgumentException("unknown triplet: "+m);
			}
			start += length;
		}

		return start - bstart;
	}

	int binary_cmd(byte[] buffer, int bstart, List<Triplet> triplets) {
		int start = bstart;

		for(Triplet m : triplets) {
			int length = 0;
			switch(m.eClass().getClassifierID()) {
			«FOREACH groupMembers AS t»
			«IF t.type.toString() == "GOCACmd"»
			case AfplibPackage.«camelCase2Constant(t.name)»: {
				m.setTripletId(«t.id»);
				«t.name» obj = («t.name») m;
				«FOREACH t.elements AS e»«EXPAND groupSaver FOR e»«ENDFOREACH»
				«FOREACH t.elements AS e»«EXPAND propertySaver FOR e»«ENDFOREACH»

				«IF t.id == 0»
					buffer[start] = 0;
				«ELSE»
					if((«t.id» & 0x88) == 0x08) {
						buffer[start] = (byte) «t.id»;
					} else if(«t.id» == 0xfe) {
						// extended - unsupported
					} else {
						if(length == 0) length = 2;
						buffer[start] = (byte) «t.id»;
						buffer[start + 1] = (byte) (length - 2);
					}
				«ENDIF»
				break;
			}
			«ENDIF»«ENDFOREACH»
			default: throw new IllegalArgumentException("unknown triplet: "+m);
			}
			start += length;
		}

		return start - bstart;
	}

	int binary_cs(byte[] buffer, int bstart, List<Triplet> triplets) {
		int start = bstart;

		boolean nextCSisUnChained = true;
		Triplet lastTriplet = triplets.size() == 0 ? null : triplets.get(triplets.size() - 1);

		for(Triplet m : triplets) {
			int length = 0;

			if(nextCSisUnChained) {
				buffer[start] = (byte) 0x2b;
				buffer[start + 1] = (byte) 0xd3;
				start += 2;
				nextCSisUnChained = false;
			}

			start++; // length is not considered to be part of cs -> model error

			switch(m.eClass().getClassifierID()) {
			«FOREACH groupMembers AS t»
			«IF t.type.toString() == "CS"»
			case AfplibPackage.«camelCase2Constant(t.name)»: {
				m.setTripletId(«t.id»);
				«t.name» obj = («t.name») m;
				«FOREACH t.elements AS e»«EXPAND groupSaver FOR e»«ENDFOREACH»
				«FOREACH t.elements AS e»«EXPAND propertySaver FOR e»«ENDFOREACH»

				if(length == 0) length = 1;
				buffer[start - 1] = Data.toUnsignedByte(length + 1)[0]; // include type
				if(lastTriplet.equals(m)) {
					buffer[start] = Data.toUnsignedByte(«t.id» & 0xfe)[0]; // unchain it
					nextCSisUnChained = true;
				} else {
					buffer[start] = Data.toUnsignedByte(«t.id» | 0x01)[0]; // chain it
				}
				break;
			}
			«ENDIF»«ENDFOREACH»
			default: throw new IllegalArgumentException("unknown triplet: "+m);
			}
			start += length;
		}

		return start - bstart;
	}

	public int binary(byte[] buffer, int start, SF sf) {
		int length = 9;
		if(sf instanceof UNKNSF) {
			System.arraycopy(sf.getRawData(), 0, buffer, start, sf.getRawData().length);
			length = sf.getRawData().length - 2;
			return length;
		}
		switch(sf.eClass().getClassifierID()) {
		«FOREACH structuredFields AS sf»
		case AfplibPackage.«sf.name»: {
			sf.setId(«sf.id»);
			«sf.name» obj = («sf.name») sf;
			«IF isBegin(sf.id)»
			charsets.push(charset);
			charset = CodepageHelper.CHARSET_IBM500;
			«ENDIF»
			«IF isEnd(sf.id)»
			if(!charsets.isEmpty())
				charset = charsets.pop();
			else
				charset = CodepageHelper.CHARSET_IBM500;
			«ENDIF»
			«FOREACH sf.elements AS e»«EXPAND groupSaver FOR e»«ENDFOREACH»
			«FOREACH sf.elements AS e»«EXPAND propertySaver FOR e»«ENDFOREACH»
			«REM»«IF optional»«ENDREM»
			«REM»«ENDIF»«ENDREM»

			return length;
		}
		«ENDFOREACH»
			default: throw new IllegalArgumentException("unknown sf: "+sf);
		}
	}

}
«ENDFILE»
«ENDDEFINE»

«DEFINE groupSaver FOR TYPE»
	«IF optional»
		if(obj.«getter()»() != null«IF metaType == Group» && obj.«getter()»().size() > 0«ENDIF») {
	«ENDIF»
	«IF metaType == Group»«REM» not sure about this
		«IF variableLength»«ENDREM»
			{
			«IF ((Group)this).type.toString() == "Triplet"»
			int size = binary_triplets(buffer, start + «start», obj.«getter()»());
			if(«start» + size > length) length = «start» + size;
			«ELSEIF ((Group)this).type.toString() == "CS"»
			int size = binary_cs(buffer, start + «start», obj.«getter()»());
			if(«start» + size > length) length = «start» + size;
			«ELSEIF ((Group)this).type.toString() == "Fixed"»
			int size = binary_«((TYPEContainer)eContainer).name»RG(buffer, start + «start», obj.«getter()»());
			if(«start» + size > length) length = «start» + size;
			«IF ((Group)this).lengthSize != -1 && ((Group)this).isLengthFixed»
			if(obj.«getter()»().size()>0)
			Saver.saveUnsigned(buffer, start + «start» + «((Group)this).elementLengthOffset», start + «start» + «((Group)this).elementLengthOffset» + «((Group)this).lengthSize» - 1, size / obj.«getter()»().size());
			else
			Saver.saveUnsigned(buffer, start + «start» + «((Group)this).elementLengthOffset», start + «start» + «((Group)this).elementLengthOffset» + «((Group)this).lengthSize» - 1, 0);
			«ENDIF»
			«ELSEIF ((Group)this).type.toString() == "SDF"»
			int size = binary_sdf(buffer, start + «start», obj.«getter()»());
			if(«start» + size > length) length = «start» + size;
			«ELSEIF ((Group)this).type.toString() == "GOCACmd"»«REM»not needed«ENDREM»
			«ENDIF»
			«REM»
			int size = GroupMemberFactory.getInstance().save(
			buffer, start + «start», «((Group)e).elementLength»,
			«((Group)e).lengthSize», «((Group)e).elementLengthOffset», «((Group)e).idSize»,
			«((Group)e).elementIdOffset», obj.«getter()»(), "«((Group)e).type»", environment);
			if(«start» + size > length) length = «start» + size;«ENDREM»
			}«REM»
		«ELSE»
			GroupMemberFactory.getInstance().save(
			buffer, start + «start», «((Group)e).elementLength»,
			«((Group)e).lengthSize», «((Group)e).elementLengthOffset», «((Group)e).idSize»,
			«((Group)e).elementIdOffset», obj.«getter()»(), "«((Group)e).type»", environment);
			if(«stop» + 1 > length) length = «stop» + 1;
		«ENDIF»«ENDREM»
	«ELSE»
		«IF variableLength»
		«ELSE»
			if(«stop» + 1 > length) length = «stop» + 1;
		«ENDIF»
	«ENDIF»
	«IF optional»
		}
	«ENDIF»
«ENDDEFINE»

«DEFINE propertySaver FOR TYPE»
«REM»mandatory may not be present in source «IF optional»«ENDREM»
		if(obj.«getter()»() != null) {
«REM»			«ENDIF»«ENDREM»
	«IF metaType == Group»
	«ELSE»
		«IF variableLength»
			«IF metaType == CHAR»
				«IF name == "FQName"»
				if(obj.getFQNType() == FullyQualifiedNameFQNType.CONST_DATA_OBJECT_INTERNAL_RESOURCE_REFERENCE_VALUE) {
					int lid = Integer.parseInt(obj.getFQName());
					Saver.saveUnsigned(buffer, start + «start», start + «start», lid);
					length = «start» + 1;
				} else {
					int size = Saver.save(buffer, start + «start», obj.«getter()»(), charset);
					if(«start» + size > length) length = «start» + size;
				}
				«ELSE»
			{
			int size = Saver.save(buffer, start + «start», obj.«getter()»(), charset);
			if(«start» + size > length) length = «start» + size;
			}
				«ENDIF»
			«ELSE»
			{
			int size = Saver.save(buffer, start + «start», obj.«getter()»());
			if(«start» + size > length) length = «start» + size;
			}
			«ENDIF»
		«ELSE»
			«IF metaType == CHAR»«IF eContainer.metaType == SF»
				if(obj.«getter()»() != null) {
				Saver.save(buffer, start + «start», start + «stop», obj.«getter()»(), Charset.forName("IBM500"));
				}
			«ELSE»
				if(obj.«getter()»() != null) {
				Saver.save(buffer, start + «start», start + «stop», obj.«getter()»(), charset);
				}
			«ENDIF»
			«ELSEIF metaType == UNDF»
			if(obj.«getter()»() != null) {
			Saver.save(buffer, start + «start», start + «stop», obj.«getter()»());
			}
			«ELSEIF metaType == SBIN»
			if(obj.«getter()»() != null) {
			Saver.saveSigned(buffer, start + «start», start + «stop», obj.«getter()»());
			}
			«ELSE»
			Saver.saveUnsigned(buffer, start + «start», start + «stop», obj.«getter()»());
			«ENDIF»
			if(«stop» + 1 > length) length = «stop» + 1;
		«ENDIF»
	«ENDIF»
		}«REM»moved out of optional if, cause see above «ENDREM»
«ENDDEFINE»

«DEFINE fixedGroup FOR TYPEContainer»
«FOREACH elements AS e»«IF e.metaType == Group && ((Group)e).type.toString() == "Fixed"»
«IF (((Group)e).elementLength == -1 && ((Group)e).isLengthFixed) || ((Group)e).elementLength != -1»
	void «name»RG(List<«name»RG> objs, byte[] buffer, int start, int bufstop, int length) {
		if(length == 0) return;
		int pos = start;
		while(pos + length - 1 <= bufstop) {
			int stop = pos + length - 1;
			objs.add(_«name»RG(buffer, pos, stop));
			pos+=length;
		}
	}
«ELSE»
	void «name»RG(List<«name»RG> objs, byte[] buffer, int start, int bufstop, int lengthOffset, int lengthSize) {
		int pos = start;
		while(pos <= bufstop) {
			int length = Data.toUnsigned(buffer, pos+lengthOffset, pos+lengthOffset-1+lengthSize);
			if(length == 0) break;
			int stop = pos + length - 1;
			if(stop > bufstop) break;
			objs.add(_«name»RG(buffer, pos, stop));
			pos+=length;
		}
	}
«ENDIF»

	int binary_«name»RG(byte[] buffer, int bstart, List<«name»RG> triplets) {
		int start = bstart;

		for(«name»RG obj : triplets) {
			int length = _«name»RG(obj, buffer, start);
			start += length;
		}

		return start - bstart;
	}
«ENDIF»
«ENDFOREACH»
«ENDDEFINE»

«DEFINE setter FOR TYPE»
    {
	int sstop = pos+«stop»;
	«IF optional == true»
		«IF variableLength == true»
			if(stop >= pos+«start») {
				sstop = stop;
		«ELSE»
			if(stop >= pos+«stop») {
		«ENDIF»
	«ELSE»
		«IF variableLength == true»
				sstop = stop;
				if(sstop >= pos + «start»)
		«ELSE»
				if(sstop <= stop)
		«ENDIF»
	«ENDIF»
	«EXPAND elementSetter FOR this»
	«IF optional == true»
			}
	«ENDIF»
	}
«ENDDEFINE»

«DEFINE elementSetter FOR Group»{
	«IF type.toString() == "Fixed"»
	«IF elementLength == -1»
		«IF isLengthFixed»
		int length = Data.toUnsigned(buffer, pos+«start»+«elementLengthOffset», pos+«start»+«elementLengthOffset»-1+«lengthSize»);
		«((TYPEContainer)eContainer).name»RG(obj.«getter()»(), buffer, pos+«start», sstop, length);
		«ELSE»
		«((TYPEContainer)eContainer).name»RG(obj.«getter()»(), buffer, pos+«start», sstop, «elementLengthOffset», «lengthSize»);
		«ENDIF»
	«ELSE»
		«IF ((TYPEContainer)eContainer).name == "FNI"»
	«((TYPEContainer)eContainer).name»RG(obj.«getter()»(), buffer, pos+«start», sstop, fnc == null || fnc.getFNIRGLen() == null ? «elementLength» : fnc.getFNIRGLen());
		«ELSE»
	«((TYPEContainer)eContainer).name»RG(obj.«getter()»(), buffer, pos+«start», sstop, «elementLength»);
		«ENDIF»
	«ENDIF»
	«ELSEIF type.toString() == "Triplet"»
	triplet(obj.«getter()»(), buffer, pos+«start», sstop);
	«ELSEIF type.toString() == "SDF"»
	sdf(obj.«getter()»(), buffer, pos+«start», sstop);
	«ELSEIF type.toString() == "CS"»
	cs(obj.«getter()»(), buffer, pos+«start», sstop);
	«ELSEIF type.toString() == "GOCACmd"»
	«ENDIF»
	«REM»
	«IF type.toString() == "Fixed"»
//	obj.«getter()»().addAll(GroupMemberFactory.getInstance().create(
//	buffer, pos+«start», sstop + 1, «elementLength»,
//	«lengthSize», «isLengthFixed», «elementLengthOffset», «idSize»,
//	«elementIdOffset», «((TYPEContainer)eContainer).name»RG.class, obj, environment));
	«ELSE»
//	obj.«getter()»().addAll(Arrays.asList(GroupMemberFactory.getInstance().create(
//	buffer, pos+«start», sstop + 1, «elementLength»,
//	«lengthSize», «isLengthFixed», «elementLengthOffset», «idSize»,
//	«elementIdOffset», "«type»", obj, environment)));
	«ENDIF»
«ENDREM»}«ENDDEFINE»

«DEFINE elementSetter FOR CHAR»«IF this.eContainer.metaType == SF»
					obj.«setter()»(new String(buffer, pos+«start», sstop-pos-«start»+1, CodepageHelper.CHARSET_IBM500));«ELSE»
					obj.«setter()»(new String(buffer, pos+«start», sstop-pos-«start»+1, charset));«ENDIF»
«ENDDEFINE»

«DEFINE elementSetter FOR UBIN»obj.«setter()»(Data.toUnsigned(buffer, pos+«start», sstop));«ENDDEFINE»

«DEFINE elementSetter FOR SBIN»obj.«setter()»(Data.toSigned(buffer, pos+«start», sstop));«ENDDEFINE»

«DEFINE elementSetter FOR BITS»obj.«setter()»(Data.toUnsigned(buffer, pos+«start», sstop));«ENDDEFINE»

«DEFINE elementSetter FOR CODE»obj.«setter()»(Data.toUnsigned(buffer, pos+«start», sstop));«ENDDEFINE»

«DEFINE elementSetter FOR UNDF»obj.«setter()»(Arrays.copyOfRange(buffer, pos+«start», sstop + 1));«ENDDEFINE»

«DEFINE elementSetter FOR TYPE»
oOO
«ENDDEFINE»